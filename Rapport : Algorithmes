          Rapport

1.on définit une structure Case qui est composée d’une variable couleur et une variable dedant.
struct Case{
   char couleur;
   int dedans;
};

2.la grille est composée de cases,on écrit une fonction qui s’appelle Grille(int taille)pour créer une grille de taille carrée,dans cette fonction,on utilise la fonction malloc pour obtenir un espace continu.
grille Grille(int taille)
{
        grille ret=NULL;
        ret=malloc(taille*taille*sizeof(Case));	
        return ret;
}

3.pour libérer l’espace mémoire occupé par une grille,on a écrit une fonction qui s’appelle Liberation(grille a) en utilisant la fonction free();
void Liberation(grille a)
{
    if(a!=NULL)
  {
    free(a);
    a=NULL;
  }
}
4.pour avoir une couleur aléatoire,on utilise la fonction random() pour créer la couleur aléatoire
char constructeur()
{
    /*srand((unsigned)time(NULL));*/
    int i=random()%6+1;     
    char couleur;
    switch(i)
   {
     case 1:couleur='B';break;
     case 2:couleur='V';break;
     case 3:couleur='R';break;
     case 4:couleur='J';break;
     case 5:couleur='M';break;
     case 6:couleur='G';break;
     default:break;
   }
    return couleur;
}
5.on écrit une fonction qui s’appelle get_couleur(grille g) pour obtenir la couleur d’une case
char get_couleur(grille g) {
	return (g->couleur);
}
6.on écrit une fonction qui s’appelle get_dedant(grille g)pour obtenir la valeur dedant d’une case
int get_dedant(grille g) {
	return (g->dedant);
}
7.on écrit une fonction qui s’appelle augemente_pointeur(grille g)pour augmenter la valeur de pointeur g. 
8.pour initialiser la grille à partir de valeurs aléatoires,on utilise la fonction ci-dessous.
void init_grille(grille a,int taille)
{
     int i=0;
     for(i=0;i<taille*taille;i++)
     {
         a->couleur=constructeur();
         a=augemente_pointeur(a);
     }
}
9.pour initialiser la grille à partir de valeurs contenues dans un fichier ,on écrit une fonction 
void init_grille_fichier(grille a,FILE *fp,int taille)
{
     int i=0;
     for(i=0;i<taille*taille;i++)
     {
         a[i].couleur=fgetc(fp);
     }
     fclose(fp); 
}



On définit d’abord la structure de liste pour stocker la composante connexe.
listevide est un test de vacuité.
makel est le constructeur il place l’entier au sommet de la liste.
pop recupere la tete.
sui renvoie le suivant.
freel libère la mémoire.

change1 change la valeur d’une case dans la grille.

La gestion de la composante connexe ce fait en deux instances au niveaux d’une liste et de chaque case.
Chaque case sait si elle appartient à la composante.
A chaque instant la fonction composante met a jour la liste des case appartenant a la composante et met a jour ces dernière.

changeall applique change1 a chaque case de la liste.

win regarde si toute le case sont dans la composante.


A chaque itération :
-on demande une couleur
-changeall(grille,composante(grille,liste),couleur)
-win(grille,taille)
